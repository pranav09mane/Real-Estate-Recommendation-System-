# -*- coding: utf-8 -*-
"""Untitled5 (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a0brbH35QpexRjQvp76fUlXRMYWGpKaw
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import cross_val_score

USAhousing = pd.read_csv('Untitled spreadsheet (2).csv')

USAhousing

USAhousing.info()

USAhousing.describe()

USAhousing.columns

sns.pairplot(USAhousing)

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'USAhousing' is your DataFrame
sns.countplot(x='locality_name', data=USAhousing)
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.show()

import seaborn as sns
import pandas as pd

# Assuming 'USAhousing' is your DataFrame

# Select only numerical features for correlation analysis
numerical_features = USAhousing.select_dtypes(include=['number'])

# Calculate the correlation matrix for numerical features
correlation_matrix = numerical_features.corr()

# Generate the heatmap
sns.heatmap(correlation_matrix)

x = USAhousing[['value_per_sqft', 'price', 'area', 'total_rooms', 'total_beds', 'age']]  # Include 'age'
    y = USAhousing['locality_name']

"""# random forest"""

scaler = StandardScaler()
 x = scaler.fit_transform(x)

le = LabelEncoder()
y_encoded = le.fit_transform(y)

x_train, x_test, y_train, y_test = train_test_split(x, y_encoded, test_size=0.4, random_state=101)

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(x_train, y_train)

y_pred = rf_model.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error on test data: {mse:.4f}")
print(f"R-squared Score (Accuracy) on test data: {r2:.4f}")

scores = cross_val_score(rf_model, x, y_encoded, cv=5, scoring='neg_mean_squared_error')
print(f'Cross-validated MSE: {np.mean(np.abs(scores)):.4f}')

def predict_locality(USAhousing):
    value_per_sqft = float(input("Enter the value per sqft: "))
    price = float(input("Enter the price: "))
    area = float(input("Enter the area: "))
    total_rooms = float(input("Enter the total number of rooms: "))
    total_beds = float(input("Enter the total number of beds: "))
    age = float(input("Enter the age of the property (in years): "))
    input_data = pd.DataFrame({
        'value_per_sqft': [value_per_sqft],
        'price': [price],
        'area': [area],
        'total_rooms': [total_rooms],
        'total_beds': [total_beds],
        'age': [age]
    })
    input_data_scaled = scaler.transform(input_data)
    prediction = rf_model.predict(input_data_scaled)[0]
    predicted_locality = le.inverse_transform([int(round(prediction))])[0]

    return predicted_locality
predicted_locality = predict_locality(USAhousing)
print("Predicted Locality:", predicted_locality)

import pickle

# Assuming 'rf_model' is your trained RandomForestRegressor
with open('rf_model.pkl', 'wb') as file:
    pickle.dump(rf_model, file)

